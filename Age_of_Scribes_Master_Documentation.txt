Age of Scribes - Comprehensive Master Documentation
==================================================

Version: 0.0.4.0 (Comprehensive Edition)
Last Updated: 2025-01-23

This is the comprehensive master documentation for all Age of Scribes backend systems,
providing detailed technical specifications, integration patterns, and usage guidelines
for the complete social simulation engine.

===============================================================================
SYSTEM OVERVIEW
===============================================================================

The Age of Scribes backend simulates a living social world with autonomous NPCs,
dynamic settlements, complex faction relationships, emergent economic behaviors,
and realistic career progression systems. The engine creates believable characters
who adapt and evolve in response to changing circumstances.

CORE SYSTEMS ARCHITECTURE:
- Settlement System: Dynamic settlement management with tier-based classification
- Economy Tick System: Daily economic simulation with resource flows
- Caravan System: Resource transport and trade network simulation
- Guild Event Engine: Dynamic professional organization behavior and conflicts
- NPC-Guild Integration System: Organic membership and career progression within guilds
- Guild Formation System: Equal opportunity guild creation for NPCs and Player Characters
- NPC AI System: Autonomous character behavior with decision-making
- NPC Career Transition System: Dynamic professional mobility
- Faction Dynamics: Political relationships and organizational behavior
- Reputation System: Multi-dimensional social standing tracking
- Justice System: Legal framework and conflict resolution
- Supporting Systems: Memory Core, Rumor Engine, NPC Profile, Faction Generator

SIMULATION PRINCIPLES:
- Emergent behavior from simple rules
- Multi-layered interaction systems
- Realistic economic interdependencies
- Character-driven narrative generation
- Dynamic world state evolution
- Player agency integration points

TECHNICAL ARCHITECTURE:
- Modular component design for extensibility
- Event-driven communication between systems
- Efficient processing for large-scale simulation
- Persistent state management
- Cross-system data consistency
- Performance optimization for real-time operation

===============================================================================
SETTLEMENT SYSTEM
===============================================================================

OVERVIEW
--------
The Settlement System provides dynamic settlement management with tier-based
classification, population dynamics, comprehensive resource management,
trade tracking, and governance systems. Settlements evolve organically
based on economic conditions, population growth, and external factors.

TIER CLASSIFICATION SYSTEM
---------------------------
Five-tier hierarchy with automatic progression:

**HAMLET (10-99 population):**
- Basic resource production
- Simple governance structures  
- Limited trade capacity
- High growth potential (1.2x modifier)
- Vulnerable to collapse

**VILLAGE (100-499 population):**
- Diversified economic base
- Established local governance
- Regular trade relationships
- Stable population growth
- Community identity formation

**TOWN (500-1999 population):**
- Specialized industry development
- Municipal governance systems
- Regional trade significance
- Infrastructure investment
- Cultural institution emergence

**SMALL CITY (2000-9999 population):**
- Multiple economic sectors
- Complex political structures
- Trade network centrality
- Educational institutions
- Reduced growth rate (0.8x modifier)

**LARGE CITY (10000+ population):**
- Economic powerhouse status
- Sophisticated governance
- International trade connections
- Cultural and intellectual centers
- Slow growth (0.4x modifier) but high stability

RESOURCE MANAGEMENT SYSTEM
---------------------------
Eight-resource economy with production, consumption, and trade tracking:

**RESOURCE TYPES:**
- **Food**: Basic sustenance, population growth dependency
- **Ore**: Industrial production, tool manufacturing base
- **Cloth**: Trade goods, cultural development
- **Wood**: Construction, fuel, shipbuilding
- **Stone**: Infrastructure, defensive structures
- **Tools**: Production efficiency, technological advancement
- **Luxury**: Trade value, cultural sophistication
- **Magic Components**: Special crafting, faction abilities

**RESOURCE MECHANICS:**
```python
class ResourceData:
    stockpile: float          # Current stored quantity
    production_base: float    # Daily production capacity
    consumption_base: float   # Daily consumption rate
    import_volume: float      # Trade imports per day
    export_volume: float      # Trade exports per day
    trade_volume_rolling: List[float]  # 30-day trade history
```

**PRODUCTION VARIANCE:**
- Base production ±5% daily variance
- Seasonal modifiers (0.8x to 1.2x)
- Enchantment integrity bonus (10-30%)
- Population efficiency scaling
- Infrastructure quality impacts

GOVERNANCE AND POLITICS
-----------------------
**GOVERNANCE STRUCTURE:**
- Founding year tracking and age-based stability
- Governing faction identification and control
- Settlement type classification (monarchy, republic, etc.)
- Multi-faction reputation system (-100 to +100)
- Political stability scoring (0-100)

**STABILITY CALCULATION:**
```python
def calculate_stability(self) -> float:
    base_stability = 50.0
    
    # Age-based stability (mature settlements more stable)
    age_factor = min(20.0, self.age_years * 0.5)
    
    # Population happiness (food availability)
    food_factor = min(15.0, self.food_security_ratio * 15.0)
    
    # Economic health
    economic_factor = min(10.0, self.economic_prosperity * 10.0)
    
    # Governing faction reputation
    governance_factor = min(10.0, self.governing_faction_reputation * 0.1)
    
    # Random events and external pressures
    external_factor = self.external_pressure_modifier
    
    return max(0.0, min(100.0, 
        base_stability + age_factor + food_factor + 
        economic_factor + governance_factor + external_factor))
```

POPULATION DYNAMICS
-------------------
**GROWTH MECHANICS:**
- Base growth rate: 0.1% daily
- Stability modifier: 0.5x to 1.5x
- Tier modifiers: Hamlet 1.2x, Large City 0.4x
- Food availability: 0.3x to 1.5x multiplier
- Random variance: ±20%

**MIGRATION PATTERNS:**
- Economic opportunity drives in-migration
- Resource scarcity causes out-migration
- Political instability triggers population flight
- Cultural factors influence settlement preferences
- Distance decay for migration likelihood

SETTLEMENT EVOLUTION AND COLLAPSE
----------------------------------
**EVOLUTION CRITERIA:**
- Population threshold achievement
- Economic stability maintenance
- Infrastructure development level
- Political maturity indicators
- Trade network integration

**COLLAPSE CONDITIONS:**
- Sustained population decline (>30% over time)
- Economic failure (negative resources for extended period)
- Political instability (stability < 20 for extended period)
- External conquest or natural disaster
- Critical resource depletion

TECHNICAL SPECIFICATIONS
-------------------------
**PERFORMANCE:**
- Memory usage: ~3.5KB per settlement
- Processing time: <1ms per settlement per tick
- Scalability: 100-10,000 settlements supported
- Database persistence for world state
- Efficient delta updates for changes

**API INTERFACE:**
```python
class Settlement:
    def __init__(self, name: str, population: int, tier: SettlementTier = None, 
                 location: Tuple[float, float] = (0, 0), founding_year: int = 1000)
    def update_settlement(self, ticks_elapsed: int = 1) -> List[Dict[str, Any]]
    def calculate_stability(self) -> float
    def set_reputation(self, faction_id: str, value: float) -> None
    def process_trade(self, resource_type: ResourceType, quantity: float, is_import: bool)
    def serialize(self) -> Dict[str, Any]
    def can_evolve(self) -> bool
    def check_collapse_conditions(self) -> bool
```

===============================================================================
ECONOMY TICK SYSTEM  
===============================================================================

OVERVIEW
--------
The Economy Tick System orchestrates daily economic cycles across all settlements,
managing resource flows, trade relationships, population dynamics, and economic
interdependencies. It provides the temporal backbone for the entire simulation.

DAILY CYCLE PROCESSING
----------------------
Seven-step economic processing cycle executed each simulation day:

**1. TRADE VOLUME UPDATE:**
- Records daily import/export deltas
- Maintains 30-day rolling trade history
- Calculates trade velocity and trends
- Identifies emerging trade patterns

**2. POPULATION DYNAMICS:**
- Applies base growth rate (0.1% daily)
- Calculates stability modifiers
- Processes tier-specific growth factors
- Handles food availability impacts
- Applies random variance (±20%)

**3. STABILITY RECALCULATION:**
- Updates settlement stability scores
- Factors in economic conditions
- Considers political factors
- Integrates external pressures
- Triggers stability-based events

**4. ENCHANTMENT INTEGRITY:**
- Processes magical infrastructure decay
- Applies trade-based reinforcement
- Calculates random fluctuation (±2 points)
- Manages magical resource integration
- Updates production bonuses

**5. RESOURCE CYCLE:**
- Calculates daily production with ±5% variance
- Applies enchantment integrity bonuses (10-30%)
- Processes consumption based on population
- Updates stockpile levels
- Handles resource constraints

**6. EVOLUTION EVALUATION:**
- Checks settlement evolution criteria
- Processes tier advancement
- Updates settlement capabilities
- Triggers evolution events

**7. COLLAPSE EVALUATION:**
- Monitors collapse conditions
- Processes settlement failures
- Handles population dispersal
- Updates regional stability

POPULATION DYNAMICS ENGINE
--------------------------
**GROWTH CALCULATION:**
```python
def calculate_population_growth(settlement: Settlement) -> float:
    base_rate = 0.001  # 0.1% daily
    
    # Stability modifier (0.5x to 1.5x)
    stability_mod = 0.5 + (settlement.stability_score / 100.0)
    
    # Tier-specific modifiers
    tier_modifiers = {
        SettlementTier.HAMLET: 1.2,
        SettlementTier.VILLAGE: 1.0,
        SettlementTier.TOWN: 0.9,
        SettlementTier.SMALL_CITY: 0.8,
        SettlementTier.LARGE_CITY: 0.4
    }
    tier_mod = tier_modifiers.get(settlement.tier, 1.0)
    
    # Food availability (0.3x to 1.5x)
    food_ratio = settlement.calculate_food_security()
    food_mod = max(0.3, min(1.5, food_ratio))
    
    # Random variance (±20%)
    random_mod = random.uniform(0.8, 1.2)
    
    return base_rate * stability_mod * tier_mod * food_mod * random_mod
```

RESOURCE FLOW SIMULATION
-------------------------
**PRODUCTION VARIANCE:**
- Base production rates with daily fluctuation
- Seasonal modifiers affecting agricultural output
- Technology level impacts on efficiency
- Labor availability constraints
- Infrastructure quality bonuses

**CONSUMPTION MODELING:**
- Population-based consumption scaling
- Tier-specific consumption patterns
- Luxury demand based on prosperity
- Emergency consumption reduction during scarcity
- Trade good consumption for external relationships

**TRADE BALANCE TRACKING:**
- Import dependency calculation
- Export capacity utilization
- Trade deficit/surplus monitoring
- Regional trade flow mapping
- Economic vulnerability assessment

ECONOMIC INTERDEPENDENCY MODELING
----------------------------------
**REGIONAL ECONOMICS:**
- Settlement specialization emergence
- Comparative advantage development
- Trade route efficiency optimization
- Economic cluster formation
- Regional economic resilience

**MARKET DYNAMICS:**
- Supply and demand price modeling (future feature)
- Resource scarcity impact on behavior
- Economic boom and bust cycles
- Trade network robustness testing
- Economic shock propagation

PERSISTENT SIMULATION STATE
---------------------------
**STATE MANAGEMENT:**
```python
class EconomyTickSystem:
    def __init__(self, current_day: int = 1, season_modifier: float = 1.0):
        self.current_day = current_day
        self.season_modifier = season_modifier
        self.daily_logs = []
        self.performance_metrics = {}
        
    def economy_tick(self, settlements: List[Settlement]) -> Dict[str, Any]:
        # Execute seven-step daily cycle
        # Log performance metrics
        # Update persistent state
        # Return summary statistics
```

PERFORMANCE CHARACTERISTICS
---------------------------
**PROCESSING EFFICIENCY:**
- 0.1ms processing time per tick for 4 settlements
- Linear scaling to 1,000+ settlements
- Efficient memory usage (~200 bytes overhead per settlement)
- Optimized algorithms for large-scale simulation
- Minimal garbage collection impact

**SCALABILITY TARGETS:**
- 100 settlements: <1ms per tick
- 1,000 settlements: <10ms per tick
- 10,000 settlements: <100ms per tick
- Real-time performance for up to 500 settlements
- Batch processing support for larger worlds

===============================================================================
CARAVAN SYSTEM
===============================================================================

OVERVIEW
--------
The Caravan System simulates resource transport between settlements, creating
dynamic trade networks based on supply and demand dynamics. It enables realistic
economic interdependencies and emergent trade behaviors that respond to changing
economic conditions across the simulated world.

CORE FUNCTIONALITY
------------------
**AUTOMATIC CARAVAN GENERATION:**
- Analyzes settlement resource deficits (>10% shortfall)
- Identifies potential suppliers with surpluses
- Prioritizes suppliers by distance and surplus magnitude
- Creates caravans with appropriate cargo quantities
- Updates supplier and destination resource tracking

**TRAVEL AND LOGISTICS:**
- Distance-based travel time using Euclidean geometry
- Base travel speed: 2 distance units per day
- Risk scoring for event probability calculation
- Route optimization for efficiency
- Cargo capacity and economic viability thresholds

CARAVAN CLASS ARCHITECTURE
---------------------------
```python
@dataclass
class Caravan:
    origin_id: str                    # Source settlement identifier
    destination_id: str               # Target settlement identifier  
    resource_manifest: Dict[str, float]  # Resource quantities being transported
    departure_day: int                # Day caravan began journey
    travel_duration: int              # Days required for travel
    status: str                       # "in_transit", "delivered", "intercepted"
    risk_score: float                 # Risk factor (0-1) for events
    id: str                          # Unique 8-character identifier
    
    def get_arrival_day(self) -> int:
        return self.departure_day + self.travel_duration
    
    def _calculate_cargo_value(self) -> float:
        # Estimate total cargo value for risk calculation
    
    def _calculate_base_risk(self) -> float:
        # Calculate risk based on cargo value and distance
```

SUPPLY AND DEMAND ANALYSIS
---------------------------
**DEFICIT IDENTIFICATION:**
```python
def analyze_resource_needs(settlement: Settlement) -> Dict[str, Dict[str, float]]:
    resource_needs = {}
    
    for resource_type, resource_data in settlement.resources.items():
        daily_production = resource_data.production_base
        daily_consumption = resource_data.consumption_base
        current_imports = resource_data.import_volume
        
        total_supply = daily_production + current_imports
        net_balance = total_supply - daily_consumption
        
        if net_balance < 0 and daily_consumption > 0:
            deficit_ratio = abs(net_balance) / daily_consumption
            quantity_needed = abs(net_balance) * 10  # 10-day buffer
            
            resource_needs[resource_type.value] = {
                'deficit_ratio': deficit_ratio,
                'quantity_needed': quantity_needed,
                'daily_deficit': abs(net_balance)
            }
    
    return resource_needs
```

**SUPPLIER DISCOVERY:**
- Searches within maximum distance (50 units)
- Requires minimum surplus threshold (supplier maintains 20-day buffer)
- Prioritizes by surplus/distance ratio
- Considers supplier relationship factors
- Evaluates route safety and reliability

TRADE ROUTE OPTIMIZATION
-------------------------
**DISTANCE CALCULATION:**
- Euclidean distance between settlement coordinates
- Future enhancement: terrain and infrastructure modifiers
- Route quality factors affecting travel time
- Seasonal accessibility considerations

**ECONOMIC VIABILITY:**
- Minimum cargo quantity: 5 units to justify caravan
- Maximum cargo: 30% of supplier surplus per caravan
- Cost-benefit analysis for trade profitability
- Risk-adjusted return calculations

RISK AND EVENT SYSTEM
----------------------
**RISK SCORE CALCULATION:**
```python
def _calculate_base_risk(self) -> float:
    # Cargo value risk (higher value = higher risk)
    value_risk = min(0.4, self.cargo_value / 1000.0)
    
    # Distance risk (longer routes = higher risk)  
    distance_risk = min(0.3, self.distance / 100.0)
    
    # Combined risk (capped at 100%)
    return min(1.0, value_risk + distance_risk)
```

**EVENT PROCESSING:**
- 10% of risk score becomes actual event probability
- Event types: interception, delay, mechanical failure, weather
- Cargo loss, partial delivery, and delay scenarios
- Future expansion: escort systems, insurance, route security

SETTLEMENT INTEGRATION
----------------------
**RESOURCE TRACKING:**
- Updates supplier `export_volume` on caravan departure
- Reduces supplier `stockpile` by cargo quantity
- Adds to destination `import_volume` on delivery
- Updates destination `stockpile` upon successful arrival
- Maintains trade history for economic analysis

**ECONOMIC IMPACT:**
- Creates economic interdependencies between settlements
- Enables settlement specialization and comparative advantage
- Generates trade deficit/surplus dynamics
- Facilitates resource distribution optimization
- Supports economic development patterns

PERFORMANCE AND SCALABILITY
----------------------------
**COMPUTATIONAL COMPLEXITY:**
- Caravan generation: O(S²×R) where S=settlements, R=resources
- Distance calculation: O(1) per settlement pair
- Resolution processing: O(C) where C=active caravans
- Memory usage: ~200 bytes per active caravan

**OPTIMIZATION STRATEGIES:**
- Spatial indexing for supplier search
- Caching of distance calculations
- Batch processing of caravan events
- Efficient data structures for large caravan counts

**SCALABILITY TARGETS:**
- Optimal: 10-100 settlements, 50-200 active caravans
- Maximum tested: 1,000 settlements with realistic performance
- Processing time: <10ms per generation cycle for 100 settlements
- Memory scaling: Linear with active caravan count

USAGE PATTERNS AND INTEGRATION
-------------------------------
**BASIC INTEGRATION:**
```python
from caravan_system import generate_caravans, resolve_caravans

# Daily simulation loop
new_caravans = generate_caravans(settlements, current_day)
active_caravans.extend(new_caravans)
resolve_caravans(active_caravans, settlements, current_day)
```

**ADVANCED TRACKING:**
```python
# Trade pattern analysis
route_frequency = {}
for caravan in all_caravans:
    route = (caravan.origin_id, caravan.destination_id)
    route_frequency[route] = route_frequency.get(route, 0) + 1

# Economic impact measurement
total_trade_volume = sum(sum(c.resource_manifest.values()) for c in all_caravans)
```

===============================================================================
GUILD EVENT ENGINE
===============================================================================

OVERVIEW
--------
The Guild Event Engine provides dynamic, emergent behavior for professional
organizations, trade guilds, and merchant collectives within settlements.
It simulates power struggles, monopoly assertions, faction alignment shifts,
and other dramatic events that create narrative opportunities and affect
local economic and political conditions.

CORE COMPONENTS
---------------
**LOCAL GUILDS:**
Professional organizations operating within single settlements:
- Guild types: Merchants, Craftsmen, Scholars, Warriors, Thieves, Mages
- Dynamic attributes: influence score (0-100), stability, wealth, member count
- Conflict status progression: Peaceful → Tensions → Disputes → War → Siege
- Relationship tracking: rivals, allies, faction alignments

**REGIONAL GUILDS:**
Multi-settlement organizations with expanded political influence:
- Chapter guild management across multiple settlements
- Regional influence mapping and political power metrics
- Trade route control and government connections
- Unity score tracking for organizational cohesion

**GUILD EVENTS:**
Dynamic events affecting guild behavior and settlements:
- Power Struggle: Internal leadership conflicts and succession crises
- Monopoly Grab: Aggressive market domination attempts
- Faction Alignment Shift: Political loyalty changes and betrayals
- Regional Ban: Government restrictions on guild operations
- Internal Collapse: Organizational breakdown and member exodus
- Guild War: Inter-guild conflicts and trade disputes
- Charter Revoked: Legal dissolution by settlement authorities

VOLATILITY AND EVENT GENERATION
--------------------------------
**VOLATILITY CALCULATION:**
Event probability scales with guild instability factors:
- Base probability: 2% daily chance per guild
- Conflict status multipliers: Peaceful (1.0x) to Under Siege (2.5x)
- Stability modifier: Low stability (30) increases volatility 2.3x
- Monopoly attention: High market dominance attracts challenges
- Faction alignment risk: Political connections increase volatility

**EVENT WEIGHTING:**
Event selection based on current guild conditions:
- Power Struggle (weight 30): Triggered by stability < 50
- Monopoly Grab (weight 25): Triggered by influence > 70
- Regional Ban (weight 35): Triggered by settlement reputation < 30
- Internal Collapse (weight 40): Triggered by stability < 30

EVENT RESOLUTION MECHANICS
---------------------------
**DURATION AND SEVERITY:**
- Event duration: 7-90 days based on type and severity
- Severity scaling: 0.1-1.0 intensity affects daily impact
- Daily effects: Gradual influence/stability changes during event
- Resolution outcomes: Multiple possible endings per event type

**RESOLUTION EXAMPLES:**
Power Struggle outcomes:
- Leadership Change: Stability +10, Influence -5
- Compromise: Moderate improvements across metrics
- Schism: Guild splits, massive stability loss (-20), member exodus (-30%)

Monopoly Grab outcomes:
- Monopoly Established: Market dominance (+15 influence, +30 monopoly strength)
- Competition Emerges: Market pushback (-5 influence, -10 monopoly)
- Government Intervention: Legal restrictions imposed

INTEGRATION PATTERNS
---------------------
**SETTLEMENT EFFECTS:**
Guild events modify settlement behavior:
- Trade efficiency changes based on guild stability
- Economic activity affected by charter revocations
- Settlement reputation modified by guild actions

**FACTION RELATIONSHIPS:**
Political implications through faction_implications system:
- Strained relationships: -severity×10 reputation
- New alliances: +severity×5 reputation
- Hostile relationships: -severity×20 reputation

**NPC INTEGRATION:**
Guild status affects character behavior:
- Job availability modified by guild efficiency
- Employment stability reduced during guild wars
- Professional advancement through stable guilds

TECHNICAL SPECIFICATIONS
-------------------------
**PERFORMANCE:**
- Event generation: O(n) where n = number of guilds
- Event processing: O(m) where m = active events
- Memory usage: ~2KB per LocalGuild, ~3KB per RegionalGuild
- Recommended limits: <1000 guilds, <100 simultaneous events

**SCALABILITY:**
- Daily processing: <10ms for 100 guilds with 20 active events
- Event history retention: Last 100 events per guild
- Batch processing support for large guild populations
- Integration hooks for custom event types and effects

===============================================================================
NPC-GUILD INTEGRATION SYSTEM
===============================================================================

OVERVIEW
--------
The NPC-Guild Integration System creates dynamic, organic relationships between
individual NPCs and guild organizations. Unlike arbitrary assignment systems,
this framework ensures guild membership feels realistic and meaningful, with
NPCs making decisions based on personality, motivations, circumstances, and
evolving loyalties over time.

CORE PHILOSOPHY
---------------
**EMERGENT MEMBERSHIP:**
- NPCs evaluate guild membership based on personal motivations
- Career compatibility drives initial interest, personality determines commitment
- Guild membership evolves as living relationships that change over time
- No automatic assignments—all membership must be earned and maintained

**AUTHENTIC PLAYER TREATMENT:**
- Player characters receive no special treatment or automatic acceptance
- Guild membership must be earned through proper gameplay mechanics
- Guilds maintain their own standards and politics affecting all applicants
- Multiple pathways exist for players to navigate guild requirements

**DYNAMIC LOYALTY SYSTEM:**
- Guild loyalty fluctuates based on personal experiences and guild performance
- Members can become disloyal, defect, or conspire against their organizations
- High-performing guilds naturally attract and retain superior members
- Conflicts and events create meaningful loyalty consequences

NPC PROFILE EXTENSIONS
-----------------------
**NEW GUILD ATTRIBUTES:**
```python
class NPCProfile:
    # Core guild membership attributes
    guild_membership: Optional[str] = None  # LocalGuild ID or None
    guild_rank: Optional[str] = None        # "apprentice", "journeyman", "master", "guildmaster"
    guild_loyalty_score: float = 0.0        # -1.0 (disloyal) to 1.0 (devoted)
    guild_history: List[Dict[str, Any]] = []  # Complete guild involvement record
```

**GUILD HISTORY TRACKING:**
Each entry captures complete context of guild relationships:
- Event type: joined, promoted, expelled, resigned, conspired
- Guild identification and name for historical reference
- Rank and status at time of event
- Timestamp and circumstances of change
- Motivation scores and external factors

LOCAL GUILD EXTENSIONS
-----------------------
**MEMBER MANAGEMENT CAPABILITIES:**
```python
class LocalGuild:
    # Member management attributes
    members: List[str] = []                 # NPC IDs of current members
    rank_structure: List[str] = ["apprentice", "journeyman", "master", "guildmaster"]
    member_cap: int = 50                    # Maximum sustainable membership
    skill_threshold: Dict[str, float] = {   # Entry requirements
        "reputation": 0.0,                  # Local standing requirement
        "loyalty": 0.1,                     # Community commitment
        "wealth": 0.0                       # Economic prerequisites
    }
```

**MEMBER PROCESSING METHODS:**
- `accept_member()`: Process applications with requirement checking
- `evaluate_member_promotion()`: Assess promotion eligibility based on loyalty and performance
- `remove_member()`: Handle voluntary resignation and involuntary expulsion
- `evaluate_member_requirements()`: Check if potential applicants meet standards

GUILD AFFILIATION MECHANICS
----------------------------
**DAILY EVALUATION PROCESS:**
The system evaluates every NPC's guild status through `evaluate_guild_affiliation()`:

**FOR UNAFFILIATED NPCS:**
1. **Career Compatibility Assessment**: Determines guild eligibility based on profession
2. **Guild Discovery**: Identifies appropriate guilds within settlement
3. **Motivation Calculation**: Evaluates personal desire to join based on:
   - Personality traits (loyal/pragmatic vs rebellious/freedom-loving)
   - Belief system values (authority vs freedom, law vs independence)
   - Economic motivations (guild wealth, personal financial needs)
   - Social factors (loneliness, community connection needs)
4. **Guild Selection**: Chooses best-fitting guild considering:
   - Guild reputation and settlement standing
   - Faction alignment compatibility
   - Guild size and intimacy preferences
   - Stability and conflict status
5. **Requirements Verification**: Guild evaluates NPC against established standards
6. **Membership Processing**: If accepted, establishes initial rank and loyalty score

**FOR CURRENT MEMBERS:**
1. **Promotion Assessment**: Evaluates eligibility for rank advancement
2. **Loyalty Dynamics**: Adjusts loyalty based on:
   - Guild performance and stability trends
   - Personal reputation changes and social standing
   - Personality-based loyalty drift over time
   - External conflicts and political pressures
3. **Departure Evaluation**: Assesses potential resignation or expulsion risks
4. **Status Processing**: Implements any changes to membership status

CAREER-GUILD MAPPING SYSTEM
----------------------------
Professional compatibility determines guild eligibility:

| Career Type | Guild Eligibility | Membership Notes |
|-------------|------------------|------------------|
| Merchant | Merchants Guild | Trade and commerce focus |
| Craftsman | Craftsmen Guild | Artisan and manufacturing |
| Scholar | Scholars Guild | Academic and research institutions |
| Guard | Warriors Guild | Military and security organizations |
| Thief | Thieves Guild | Criminal organizations (hidden membership) |
| Mage | Mages Guild | Magical practitioners and theorists |
| Farmer | Generally Independent | Rural isolation prevents guild participation |
| Laborer | Generally Independent | General workforce without specialization |
| Noble | Above Guild Systems | Social rank prevents guild membership |
| Clergy | Religious Organizations | Separate from guild structure |

PROMOTION AND RANKING SYSTEM
-----------------------------
**STANDARD GUILD HIERARCHY:**
1. **Apprentice**: Entry-level position focusing on skill development
2. **Journeyman**: Competent practitioner with full guild privileges
3. **Master**: Senior member qualified to train others and influence policy
4. **Guildmaster**: Leadership position with authority over guild direction

**PROMOTION REQUIREMENTS:**
- **Loyalty Threshold**: Minimum devotion to guild interests and values
- **Reputation Standard**: Community standing and professional competence
- **Time Served**: Minimum duration at current rank for experience
- **Guild Capacity**: Available positions at target rank level

**PROMOTION ASSESSMENT:**
```python
def evaluate_member_promotion(npc_id: str, npc_loyalty: float, 
                            npc_reputation: float, current_rank: str) -> Optional[str]:
    promotion_thresholds = {
        'apprentice': {'loyalty': 0.3, 'reputation': 0.1, 'time_served': 30},
        'journeyman': {'loyalty': 0.5, 'reputation': 0.3, 'time_served': 90},
        'master': {'loyalty': 0.7, 'reputation': 0.5, 'time_served': 180}
    }
    
    requirements = promotion_thresholds.get(current_rank)
    if npc_loyalty >= requirements['loyalty'] and npc_reputation >= requirements['reputation']:
        return next_rank_in_hierarchy
    return None
```

LOYALTY DYNAMICS SYSTEM
------------------------
Guild loyalty score (-1.0 to 1.0) reflects NPC commitment and satisfaction:

**POSITIVE LOYALTY INFLUENCES:**
- Successful guild operations and prosperity: +0.01 daily
- Personal promotions and recognition: +0.2 instant boost
- Guild stability and effective leadership: +0.01 daily
- Naturally loyal personality traits: +0.005 daily drift
- Economic benefits and job security: Variable based on circumstances

**NEGATIVE LOYALTY INFLUENCES:**
- Guild conflicts and political instability: -0.02 to -0.05 daily
- Personal reputation problems affecting standing: -0.01 daily
- Rebellious personality traits: -0.01 daily drift
- Leadership failures and corruption scandals: Event-based penalties
- Economic hardship and reduced benefits: Variable penalties

**LOYALTY INTERPRETATION THRESHOLDS:**
- **1.0 to 0.7**: Devoted member, unlikely to leave under any circumstances
- **0.6 to 0.3**: Committed member, stable and reliable guild participant
- **0.2 to -0.2**: Neutral member, may be influenced by external factors
- **-0.3 to -0.6**: Disloyal member, actively considering departure
- **-0.7 to -1.0**: Actively disloyal, likely to defect or join conspiracies

PLAYER CHARACTER INTEGRATION
-----------------------------
**GUILD APPLICATION METHODS:**

**Formal Application Process:**
- Standard approach through established guild leadership
- Requires meeting all stated membership requirements
- Most socially acceptable and straightforward method
- Success determined by reputation, wealth, and career compatibility

**Informal Network Approach:**
- Leveraging social connections and member recommendations
- Can circumvent some formal requirements through influence
- Requires existing relationships with current guild members
- Creates obligations and political debts for future consideration

**Bribery and Corruption:**
- Offering payments or valuable favors for admission consideration
- Can overcome reputation or skill deficiencies through wealth
- Significantly reduces initial loyalty score due to corrupt entry
- Risk of causing offense and permanent rejection if mishandled

**Coercion and Intimidation:**
- Using threats or demonstrations of power for forced admission
- Extremely high-risk approach that can backfire catastrophically
- Requires substantial reputation or demonstrable power to be effective
- Creates permanently hostile relationships within guild structure

**PLAYER ADVANTAGES:**
Players possess unique capabilities without receiving unfair benefits:
- **Active Agency**: Can work systematically to meet guild requirements
- **Strategic Networking**: Can build relationships to improve acceptance chances
- **Resource Application**: Can deploy wealth to overcome certain barriers
- **Reputation Management**: Can actively improve standing through choices and actions

ECONOMIC AND CAREER INTEGRATION
--------------------------------
**JOB AVAILABILITY EFFECTS:**
Guild membership significantly impacts economic opportunities:
- **Priority Access**: Members receive preference for guild-related employment
- **Exclusive Opportunities**: Some positions available only to guild members
- **Market Restrictions**: Non-members may be blocked from certain trades
- **Professional Networks**: Membership provides access to business connections

**TRADE AND COMMERCE IMPACTS:**
- **Favorable Rates**: Guild members negotiate better prices and terms
- **Market Access**: Some markets restricted to guild membership
- **Caravan Protection**: Guild connections provide travel safety
- **Credit Systems**: Guild standing affects lending and contract opportunities

**CAREER TRANSITION SUPPORT:**
- **Skill Development**: Guilds provide training and mentorship programs
- **Professional Advancement**: Clear progression paths within specializations
- **Cross-Guild Relationships**: Professional networks spanning multiple organizations
- **Entrepreneurship Support**: Established members can launch independent practices

CONSPIRACY AND CONFLICT SYSTEMS
--------------------------------
**ORGANIC CONSPIRACY FORMATION:**
NPCs with low loyalty may form plots against their guilds:

**Conspiracy Types:**
- **Internal Takeover**: Existing members plotting leadership changes
- **Hostile Takeover**: External groups attempting to seize control
- **Splinter Formation**: Dissatisfied members creating competing organizations
- **Rival Destruction**: Coordinated attacks on competing guilds

**Success Factors:**
- **Leadership Quality**: Cunning and diplomatic conspirators improve chances
- **Target Vulnerability**: Unstable guilds with low member loyalty
- **External Support**: Faction backing or rival guild assistance
- **Timing**: Exploitation of guild crises and leadership transitions

**Potential Outcomes:**
- Leadership replacement and policy reform
- Mass resignations and organizational splits
- New guild formation and market competition
- Conspiracy exposure and member purges

TECHNICAL SPECIFICATIONS
-------------------------
**PERFORMANCE METRICS:**
- Processing time: <2ms per NPC per daily evaluation
- Memory usage: Additional 1KB per NPC for guild attributes
- Scalability: Supports 10,000+ NPCs with guild affiliations
- Integration overhead: <5% additional processing time for existing systems

**SYSTEM INTEGRATION POINTS:**
- **Settlement System**: Guild activities affect local economic conditions
- **Economy System**: Guild membership influences trade and employment
- **Faction System**: Guild politics intersect with broader political dynamics
- **Career System**: Guild membership affects professional advancement
- **Reputation System**: Guild standing influences social interactions

**DATA PERSISTENCE:**
- Guild membership state saved with NPC profiles
- Guild history archived for narrative continuity
- Loyalty trends tracked for long-term character development
- Conspiracy activities logged for story generation

NARRATIVE GENERATION
---------------------
**EVENT TYPES:**
All guild interactions generate narrative events for story integration:
- **Membership Changes**: Joining, departing, rank advancement
- **Loyalty Shifts**: Significant changes in devotion and commitment
- **Conflict Development**: Conspiracies, rivalries, political maneuvering
- **Economic Impacts**: Employment changes, trade advantages, market access

**STORY INTEGRATION:**
Guild events create meaningful narrative opportunities:
- Personal character development through professional advancement
- Political intrigue through guild conspiracies and power struggles
- Economic storytelling through trade conflicts and market competition
- Social dynamics through professional relationships and rivalries

===============================================================================
GUILD FORMATION SYSTEM
===============================================================================

OVERVIEW
--------
The Guild Formation System enables both NPCs and Player Characters to initiate
the creation of new professional organizations within the simulation. This system
maintains strict equal treatment—Player Characters receive no special privileges
and must navigate identical challenges, requirements, and political obstacles as NPCs.

Guild formation is an earned achievement requiring careful planning, resource
accumulation, political maneuvering, and sustained effort over 30-90+ days.

CORE PHILOSOPHY
---------------
**EARNED ACHIEVEMENT PRINCIPLE:**
- Guild formation must be earned through gameplay mechanics, not menu selection
- Success requires meeting real skill, reputation, and economic thresholds
- Political opposition and competition create meaningful challenges
- Both success and failure generate lasting narrative consequences

**EQUAL TREATMENT STANDARD:**
- Player Characters follow identical rules and requirements as NPCs
- Same skill thresholds, reputation requirements, and support needs
- No automatic approval or reduced barriers for players
- Political opposition affects all characters equally regardless of player status

**REALISTIC CHALLENGE STRUCTURE:**
- Economic barriers require significant capital investment (1000-3000 gold)
- Legal obstacles demand navigation of settlement politics and regulations
- Social requirements necessitate building genuine NPC support networks
- Opposition from existing guilds creates competitive market dynamics

GUILD FORMATION PROPOSAL SYSTEM
--------------------------------
**PROPOSAL TRACKING CLASS:**
```python
class GuildFormationProposal:
    # Core identification
    proposal_id: str                    # Unique identifier
    initiator_id: str                   # NPC or Player ID
    proposed_guild_name: str            # Name for new organization
    guild_type: str                     # Professional focus area
    formation_type: GuildFormationType  # Legal, splinter, underground, etc.
    target_settlement: str              # Location for guild headquarters
    is_player_initiated: bool           # True if PC created proposal
    
    # Progress tracking
    status: FormationStatus             # Current phase of formation
    supporting_members: List[str]       # NPCs supporting formation
    required_support_count: int         # Minimum supporters needed
    pc_support_modifier: float          # Additional influence if PC has backing
    
    # Challenge management
    legal_obstacles: List[str]          # Legal barriers to overcome
    political_complications: List[str]   # Political issues to resolve
    economic_barriers: List[str]        # Economic challenges to address
    opposing_factions: List[str]        # Factions opposing formation
    rival_guilds: List[str]             # Existing guilds threatened by proposal
```

FORMATION TYPES AND PROCESSES
------------------------------
**LEGAL FORMATION (Standard Path):**
- Timeline: 60-120 days with legal review phases
- Requirements: Full regulatory compliance, settlement approval
- Advantages: Official recognition, legal protections, market access
- Challenges: Lengthy approval process, regulatory compliance costs
- Success Rate: 60-70% for well-prepared proposals

**SPLINTER GROUP FORMATION:**
- Timeline: 30-60 days but creates permanent political tensions
- Requirements: Minimum member exodus (3-8 from parent guild)
- Advantages: Experienced membership base, established networks
- Challenges: Rivalry with parent guild, potential legal complications
- Triggers: Parent guild instability, ideological schisms, leadership conflicts

**UNDERGROUND GUILD FORMATION:**
- Timeline: 15-45 days but perpetual operational risks
- Requirements: Poor reputation beneficial, criminal networks helpful
- Advantages: Lower barriers to entry, freedom from regulations
- Challenges: Risk of discovery, limited market access, unstable membership
- Prerequisites: Local reputation <-0.3, law enforcement strength <80

**RIVAL ORGANIZATION FORMATION:**
- Timeline: 90-180 days with intense political maneuvering
- Requirements: Higher support thresholds, significant capital investment
- Advantages: Market opportunities in competitive spaces
- Challenges: Active opposition from established competitors
- Strategy: Direct competition with existing guild market positions

CHARACTER REQUIREMENTS
-----------------------
**UNIVERSAL ELIGIBILITY STANDARDS (NPCs AND PCs):**

**Skill Competency Requirements:**
- Minimum professional skill: 0.6/1.0 in relevant field
- Supporting skills in leadership, diplomacy, or economics
- Skill verification through demonstrated actions, not declared stats
- Ongoing skill development possible during formation process

**Reputation Standards:**
- Legal formation: 0.3/1.0 minimum local reputation
- Underground formation: -0.5/1.0 maximum (poor reputation beneficial)
- Splinter formation: Variable based on parent guild relationship
- Rival formation: 0.4/1.0 minimum to compete effectively

**Economic Capacity Requirements:**
- Legal formation: 1000-2000 gold startup capital
- Underground formation: 300-800 gold reduced requirements
- Splinter formation: 1500-3000 gold due to competition costs
- Ongoing operational expenses: 10-20% of startup costs monthly

**Social Support Network:**
- Minimum supporters: 3-10 NPCs depending on formation type
- Support quality: Supporters must have legitimate backing motivations
- Network stability: Supporters can withdraw if circumstances change
- Political backing: Faction support significantly improves success chances

FORMATION PROCESS PHASES
-------------------------
**PHASE 1: PROPOSAL CREATION (1-7 days)**
- Initial eligibility assessment and requirement verification
- Formation type determination based on character circumstances
- Basic support network evaluation and political landscape analysis
- Proposal parameter configuration and challenge identification

**PHASE 2: SUPPORT GATHERING (30-60 days)**
- Daily 10% chance of support network changes
- 70% probability of gaining supporters vs 30% chance of new obstacles
- Political relationship building and faction negotiation
- Economic resource accumulation and investment securing
- Success threshold: Minimum supporter count reached

**PHASE 3: LEGAL REVIEW (Legal Formation Only, 15-30 days)**
- Base daily legal progress: 10% reduced by 2% per legal obstacle
- Opposition can file formal challenges extending timeline
- Political connections can accelerate approval through influence
- Resolution outcomes: Approval, conditional approval, rejection, or delay

**PHASE 4: GUILD ESTABLISHMENT (7-14 days)**
- Official charter creation and regulatory compliance completion
- Operational setup including workspace and resource allocation
- Member role assignment and hierarchy establishment
- Market entry and competitive positioning against existing guilds

PLAYER CHARACTER INTEGRATION
-----------------------------
**NO SPECIAL TREATMENT POLICY:**
- Players face identical skill, reputation, and economic requirements
- Same timeline constraints and political opposition as NPCs
- No accelerated approval processes or reduced barriers
- Failure carries identical penalties and reputation consequences

**EARNED PLAYER ADVANTAGES:**
- Active agency to systematically work toward meeting requirements
- Strategic planning capability across multiple game sessions
- Resource allocation control to direct wealth toward formation goals
- Political maneuvering through relationship building and negotiation

**PC SUPPORT MODIFIER CALCULATION:**
```python
def calculate_pc_support_modifier(player: PlayerProfile) -> float:
    modifier = 0.0
    
    # Wealth influence (earned through gameplay)
    if player.wealth_level > 5000: modifier += 0.2
    elif player.wealth_level > 2000: modifier += 0.1
    
    # Reputation influence (built through actions)
    max_reputation = max(player.reputation_local.values())
    if max_reputation > 0.7: modifier += 0.2
    elif max_reputation > 0.4: modifier += 0.1
    
    # Social network (developed through play)
    if len(player.social_connections) > 10: modifier += 0.1
    elif len(player.social_connections) > 5: modifier += 0.05
    
    return min(0.3, modifier)  # Capped to prevent overwhelming advantage
```

SPLINTER GROUP MECHANICS
-------------------------
**SPLINTERING TRIGGERS:**
- Parent guild stability <50 or member loyalty <60
- Ideological schisms over guild direction or policies
- Leadership conflicts including succession disputes
- Economic disputes over resource allocation or corruption
- External pressures from faction politics forcing divisions

**SPLINTERING PROCESS:**
```python
def process_guild_splintering(parent_guild: LocalGuild, 
                            splintering_members: List[str],
                            splinter_leader: str) -> Dict[str, Any]:
    # Validate minimum exodus (3-8 members) and leadership capability
    # Create new LocalGuild with 40% of parent influence
    # Transfer members and proportional resources
    # Establish permanent rivalry between parent and splinter
    # Apply stability (-30), loyalty (-20), influence (-15) penalties to parent
```

**PARENT GUILD IMPACT:**
- Immediate stability loss: -30 points
- Member loyalty reduction: -20 points among remaining members
- Influence decrease: -15 points in local settlement
- Permanent competitive tension with splinter organization
- Resource division between parent and splinter groups

UNDERGROUND AND ROGUE GUILDS
-----------------------------
**ROGUE FORMATION CONDITIONS:**
- Character reputation <-0.3 (outcasts and criminals)
- Existing criminal network connections
- Settlement law enforcement strength <80 (permissive environment)
- Limited legal economic opportunities due to blacklisting
- Social marginalization from legitimate professional networks

**UNDERGROUND OPERATION CHARACTERISTICS:**
- Reduced formation barriers but perpetual operational risks
- Hidden meeting locations and concealed activities
- Limited market access restricted to underground trades
- Constant threat of discovery and legal consequences
- Higher membership turnover due to arrest, death, or defection

**ROGUE GUILD FORMATION FUNCTION:**
```python
def evaluate_rogue_guild_formation(actor: Union[NPCProfile, PlayerProfile],
                                 context: Dict[str, Any]) -> Optional[GuildFormationProposal]:
    # Check criminal reputation and enforcement vulnerability
    # Assess underground network availability and safe locations
    # Configure reduced requirements but increased risks
    # Generate criminal contact support network
    # Return underground formation proposal or None if impossible
```

TECHNICAL SPECIFICATIONS
-------------------------
**PERFORMANCE METRICS:**
- Proposal processing: <1ms per active proposal per daily tick
- Formation evaluation: <5ms per character eligibility assessment
- Support network analysis: <3ms per NPC relationship calculation
- Memory usage: ~2KB per active GuildFormationProposal
- Scalability: Supports 100+ simultaneous formation attempts

**INTEGRATION POINTS:**
- Settlement System: Guild formation affects local economic development
- Economy System: New guilds alter trade patterns and resource flows
- Faction System: Guild politics intersect with broader political dynamics
- NPC-Guild Integration: Formation feeds into existing membership systems
- Reputation System: Formation success/failure affects character standing

**DATA PERSISTENCE:**
- Formation proposals saved with complete progress tracking
- Historical formation attempts archived for narrative continuity
- Success/failure outcomes logged for character development
- Political consequences tracked across faction relationships

NARRATIVE GENERATION
---------------------
**FORMATION EVENT TYPES:**
All guild formation activities generate rich narrative content:
- Proposal milestones and setback events during formation process
- Political intrigue through opposition activities and countermeasures
- Economic drama from resource competition and financial challenges
- Personal character development through leadership trials
- Community impact from new guild establishment or formation failures

**STORY INTEGRATION:**
Guild formation creates lasting narrative consequences:
- Professional advancement opportunities through successful leadership
- Political relationships shaped by formation alliances and oppositions
- Economic storylines through market competition and resource control
- Social dynamics through professional network establishment
- Settlement development influenced by new organizational structures

===============================================================================
GUILD FACILITIES & HOLDINGS SYSTEM
===============================================================================

OVERVIEW
--------
The Guild Facilities & Holdings System enables guilds to construct, control, and benefit 
from physical buildings and operational sites. This system provides economic bonuses, 
defensive capabilities, reputation improvements, and special features that create 
dynamic gameplay opportunities and enhance guild operations.

Facilities serve as the physical infrastructure of guild power, creating tangible assets 
that can be built, upgraded, damaged, captured, or lost during conflicts. Each facility 
type provides unique benefits while requiring ongoing maintenance and resources.

CORE COMPONENTS
===============

**GUILDFACILITY CLASS:**
Physical representation of guild-controlled buildings with comprehensive tracking:
```python
class GuildFacility:
    facility_id: str                        # Unique identifier
    name: str                              # Display name
    location: Tuple[float, float]          # World coordinates
    settlement_id: Optional[str]           # Containing settlement
    facility_type: str                     # "guildhall", "workshop", "warehouse", etc.
    owning_guild_id: str                   # Controlling guild
    status: str                            # "active", "damaged", "abandoned", "under_siege"
    construction_year: int                 # Year built
    reputation_bonus: float                # Settlement reputation boost
    economic_bonus: dict[str, float]       # Economic multipliers by category
    defensive_value: float                 # Military/conflict value
    special_features: list[str]            # Unique capabilities
    condition: float                       # Operational efficiency (0-100)
    maintenance_cost: float                # Daily upkeep requirement
```

**ENHANCED LOCALGUILD CLASS:**
```python
class LocalGuild:
    # Existing attributes...
    facilities: List[str] = []              # Facility IDs owned by guild
    headquarters: Optional[str] = None      # Primary facility (typically guildhall)
```

FACILITY TYPES AND CHARACTERISTICS
===================================

**GUILDHALL (Administrative Center):**
- Base Cost: 500 gold, Construction: 60 days, Maintenance: 5 gold/day
- Reputation Bonus: +10, Defensive Value: 25, Capacity: 50 occupants
- Economic Bonuses: Administration +15%, Recruitment +20%
- Special Features: Meeting hall, guild records, ceremonial chamber
- Function: Administrative center, headquarters functionality, member gathering

**WORKSHOP (Crafting Facility):**
- Base Cost: 200 gold, Construction: 30 days, Maintenance: 2 gold/day
- Reputation Bonus: +5, Defensive Value: 5, Capacity: 15 occupants
- Economic Bonuses: Crafting +25%, Production Efficiency +15%
- Special Features: Specialized tools, materials storage
- Function: Production bonuses, apprentice training, quality improvements

**WAREHOUSE (Storage Facility):**
- Base Cost: 300 gold, Construction: 45 days, Maintenance: 3 gold/day
- Reputation Bonus: +3, Defensive Value: 15, Capacity: 5 occupants
- Economic Bonuses: Storage Capacity +40%, Trade Efficiency +10%
- Special Features: Secure storage, loading dock
- Function: Trade logistics, resource storage, commercial operations

**ACADEMY (Educational Institution):**
- Base Cost: 800 gold, Construction: 90 days, Maintenance: 8 gold/day
- Reputation Bonus: +15, Defensive Value: 10, Capacity: 100 occupants
- Economic Bonuses: Education +40%, Research +25%, Knowledge Preservation +30%
- Special Features: Library, lecture halls, laboratories
- Function: Advanced education, research capabilities, knowledge centers

**FORGE (Metalworking Facility):**
- Base Cost: 350 gold, Construction: 50 days, Maintenance: 4 gold/day
- Reputation Bonus: +6, Defensive Value: 8, Capacity: 12 occupants
- Economic Bonuses: Metalworking +35%, Weapon Crafting +25%
- Special Features: Master anvil, quenching pools, bellows system
- Function: Specialized metalwork, weapon production, tool manufacturing

**SCRIPTORIUM (Scholarly Facility):**
- Base Cost: 400 gold, Construction: 55 days, Maintenance: 3.5 gold/day
- Reputation Bonus: +8, Defensive Value: 5, Capacity: 25 occupants
- Economic Bonuses: Scholarly Work +30%, Record Keeping +20%, Magical Scribing +15%
- Special Features: Rare inks, binding equipment, illumination station
- Function: Document creation, magical scribing, scholarly research

FACILITY MANAGEMENT MECHANICS
==============================

**CONSTRUCTION SYSTEM:**
```python
def construct_guild_facility(guild: LocalGuild, facility_type: str, name: str,
                           location: Tuple[float, float], settlement: Settlement, 
                           year: int) -> GuildFacility
```
- Resource deduction and timeframe management
- Settlement integration and reputation application
- Guild facility list updates and headquarters designation
- Historical event recording for narrative continuity

**CONDITION AND STATUS TRACKING:**
- Condition: 0-100 scale affecting operational efficiency
- Status: Active → Damaged → Abandoned → Under Siege → Captured
- Maintenance cost accumulation and facility degradation
- Performance degradation from neglect or damage

**OPERATIONAL EFFICIENCY CALCULATION:**
Effective bonuses = Base bonuses × Condition multiplier × Status multiplier
- Active facilities: 100% effectiveness
- Damaged facilities: 50% effectiveness
- Renovating facilities: 30% effectiveness
- Siege/Captured facilities: 0-10% effectiveness

CONFLICT AND DAMAGE MECHANICS
==============================

**FACILITY TARGETING DURING CONFLICTS:**
```python
def damage_or_capture_facility(facility: GuildFacility, by_faction_or_guild: str,
                             action_type: str, damage_amount: float) -> Dict[str, Any]
```

**DAMAGE TYPES AND CONSEQUENCES:**
- **Direct Damage**: Condition reduction, potential status downgrade
- **Siege Operations**: Reduced efficiency, occupant evacuation
- **Capture Attempts**: Ownership transfer, diplomatic incidents

**GUILD IMPACT FROM FACILITY DAMAGE:**
- Reputation loss in settlement: -10 to -20 points
- Member loyalty reduction: -5 to -10 points
- Guild stability decrease: -8 to -15 points
- Economic bonus loss proportional to damage

**SETTLEMENT CONSEQUENCES:**
- Community stability reduction from conflicts
- Reputation changes affecting guild-settlement relations
- Economic disruption from facility damage or capture
- Diplomatic incidents between involved factions

ECONOMIC INTEGRATION
====================

**SETTLEMENT BENEFIT CALCULATION:**
```python
def evaluate_facility_impact(settlement: Settlement, guild: LocalGuild) -> Dict[str, float]
```

**CUMULATIVE BONUS SYSTEM:**
Facilities provide settlement-wide benefits modified by guild stability:
- Reputation bonuses improve settlement-guild relations
- Economic multipliers enhance resource production by category
- Defensive values contribute to settlement security calculations
- Trade efficiency improvements boost commercial activities
- Settlement capacity increases allow larger NPC populations

**GUILD TYPE SPECIALIZATION:**
- Merchants: Trade efficiency +15%, Commerce economic multipliers
- Craftsmen: Production +25%, Quality improvement bonuses
- Scholars: Education +30%, Research capability enhancements
- Warriors: Defensive value +20, Recruitment efficiency bonuses

**STABILITY MULTIPLIER EFFECTS:**
Guild stability affects facility effectiveness:
- 80+ stability: Full effectiveness (100%)
- 60-79 stability: Reduced effectiveness (75%)
- 40-59 stability: Significantly reduced (50%)
- <40 stability: Minimal effectiveness (25%)

PC INTERACTION OPPORTUNITIES
=============================

**QUEST GENERATION SYSTEM:**
```python
def get_facility_quest_opportunities(facility: GuildFacility) -> List[Dict[str, Any]]
```

**FACILITY-BASED QUEST TYPES:**
- **Repair Quests**: Restore damaged facilities to operational status
- **Siege Breaking**: Liberate facilities under attack or siege
- **Secret Knowledge**: Discover hidden archives and special collections
- **Recruitment Drives**: Staff understaffed facilities with qualified workers
- **Facility Upgrades**: Enhance existing buildings with new capabilities

**PLAYER INTERACTION METHODS:**
- **Direct Investment**: Fund facility construction or improvements
- **Political Maneuvering**: Influence facility ownership through diplomacy
- **Military Action**: Seize rival facilities through combat operations
- **Economic Warfare**: Disrupt facility operations through trade manipulation
- **Social Engineering**: Recruit facility workers or turn loyalties

**FACILITY SERVICES FOR PLAYERS:**
- **Guildhalls**: Quest boards, guild membership services, meeting spaces
- **Workshops**: Crafting bonuses, specialized tools, apprentice training
- **Academies**: Research facilities, skill training, knowledge access
- **Warehouses**: Storage services, trade facilitation, cargo management
- **Training Grounds**: Combat training, skill development, equipment testing

INTEGRATION WITH EXISTING SYSTEMS
==================================

**SETTLEMENT SYSTEM INTEGRATION:**
- Facility bonuses applied through settlement AI modifiers
- Reputation changes affect settlement-guild relationships
- Defensive values contribute to settlement security calculations
- Economic bonuses enhance settlement resource production

**ECONOMY TICK INTEGRATION:**
- Daily maintenance cost processing and debt accumulation
- Condition degradation for unmaintained facilities
- Economic bonus application to settlement production systems
- Trade route enhancement through facility capabilities

**FACTION SYSTEM INTEGRATION:**
- Facility ownership creates diplomatic assets and liabilities
- Seizure operations generate faction conflict opportunities
- Economic advantages provide faction power differentials
- Strategic facility locations influence territorial control

**NPC CAREER ENGINE INTEGRATION:**
- Facilities provide specialized employment opportunities
- Professional advancement through facility-specific roles
- Skill development enhanced by facility capabilities
- Career paths tied to facility availability and condition

**RUMOR SYSTEM INTEGRATION:**
- Construction announcements and completion celebrations
- Damage reports and siege situation updates
- Ownership changes and guild conflict narratives
- Discovery events from special facility features

TECHNICAL SPECIFICATIONS
=========================

**PERFORMANCE CHARACTERISTICS:**
- Template-based facility creation minimizes object overhead
- Status-based bonus calculation prevents unnecessary computation
- Facility ID references optimize memory usage
- Event-driven updates rather than continuous monitoring

**SCALABILITY METRICS:**
- Memory usage: 2-5KB per facility for complete state tracking
- Query performance: Sub-millisecond for typical facility collections
- Supports hundreds of guilds with thousands of total facilities
- Batch processing optimized for economy tick integration

**SYSTEM INTEGRATION POINTS:**
- Settlement modifier system for economic bonus application
- Guild event system for conflict and narrative generation
- Quest system for player interaction opportunity creation
- Faction system for diplomatic consequence tracking

This comprehensive facility system provides the foundation for rich guild-settlement 
interactions, dynamic conflict resolution, and emergent storytelling opportunities 
within the Age of Scribes simulation framework.

===============================================================================
NPC AI SYSTEM
===============================================================================

OVERVIEW
--------
The NPC AI System provides autonomous character behavior with dynamic decision-making,
social interactions, faction relationships, and emergent personality development.
NPCs operate independently, forming relationships, pursuing goals, and adapting
to changing circumstances while maintaining consistent character personalities.

CORE ARCHITECTURE
-----------------
**BEHAVIOR TREE IMPLEMENTATION:**
- Hierarchical decision-making structure
- Modular behavior components for reusability
- Priority-based action selection
- Context-aware behavior adaptation
- Efficient processing for large NPC populations

**PERSONALITY SYSTEM:**
- Multi-dimensional personality traits
- Consistent behavior patterns
- Personality-driven decision biases
- Character development over time
- Social interaction style determination

NPC PROFILE STRUCTURE
----------------------
```python
class NPCProfile:
    def __init__(self, name: str, age: int, occupation: str):
        # Basic Identity
        self.name = name
        self.age = age
        self.occupation = occupation
        self.background = {}
        
        # Personality Traits (0.0 to 1.0)
        self.personality = {
            "openness": random.uniform(0.0, 1.0),
            "conscientiousness": random.uniform(0.0, 1.0), 
            "extraversion": random.uniform(0.0, 1.0),
            "agreeableness": random.uniform(0.0, 1.0),
            "neuroticism": random.uniform(0.0, 1.0)
        }
        
        # Motivational Framework
        self.motivational_weights = {
            "survival": 0.2,
            "knowledge": 0.1,
            "wealth": 0.15,
            "freedom": 0.1,
            "power": 0.05,
            "revenge": 0.0,
            "community": 0.2,
            "duty": 0.2
        }
        
        # Social Network
        self.relationships = {}
        self.reputation_scores = {}
        
        # Memory and Learning
        self.memories = []
        self.skills = {}
        self.goals = []
```

MOTIVATIONAL SYSTEM
-------------------
**EIGHT CORE MOTIVATIONS:**

**SURVIVAL MOTIVATION:**
- Drives food-seeking, shelter, safety behaviors
- Increases during resource scarcity
- Influences risk assessment and decision-making
- Can override other motivations in extreme circumstances

**KNOWLEDGE MOTIVATION:**
- Pursues learning, exploration, discovery
- Drives scholarly behavior and skill development
- Influences career choices toward intellectual pursuits
- Creates information-gathering behavior patterns

**WEALTH MOTIVATION:**
- Seeks economic advancement and material gain
- Influences trade behavior and career decisions
- Drives accumulation and investment behaviors
- Affects social relationship formation

**FREEDOM MOTIVATION:**
- Values independence and autonomy
- Resists authority and control
- Influences faction loyalty and political alignment
- Drives entrepreneurial and rebellious behaviors

**POWER MOTIVATION:**
- Seeks influence, control, and leadership positions
- Drives political engagement and faction climbing
- Influences social dominance behaviors
- Creates competitive relationship dynamics

**REVENGE MOTIVATION:**
- Emerges from betrayal, injustice, or trauma
- Drives targeted actions against specific individuals/groups
- Can override rational decision-making
- Creates long-term goal persistence

**COMMUNITY MOTIVATION:**
- Values social connections and group belonging
- Drives cooperative behavior and mutual aid
- Influences settlement loyalty and civic engagement
- Creates prosocial behavior patterns

**DUTY MOTIVATION:**
- Commitment to obligations, principles, or institutions
- Drives reliable, consistent behavior patterns
- Influences faction loyalty and professional dedication
- Creates resistance to moral compromise

DECISION-MAKING FRAMEWORK
--------------------------
**GOAL-ORIENTED BEHAVIOR:**
```python
class NPCAISystem:
    def evaluate_action_options(self, npc: NPCProfile, context: dict) -> str:
        # Gather possible actions based on context
        possible_actions = self.get_contextual_actions(npc, context)
        
        # Score each action against motivational framework
        action_scores = {}
        for action in possible_actions:
            score = 0.0
            
            # Motivational alignment scoring
            for motivation, weight in npc.motivational_weights.items():
                motivation_benefit = self.calculate_motivation_benefit(action, motivation)
                score += weight * motivation_benefit
            
            # Personality influence
            personality_modifier = self.get_personality_modifier(action, npc.personality)
            score *= personality_modifier
            
            # Social factors
            social_modifier = self.evaluate_social_consequences(action, npc)
            score *= social_modifier
            
            # Memory-based learning
            memory_modifier = self.get_memory_influence(action, npc.memories)
            score *= memory_modifier
            
            action_scores[action] = score
        
        # Select highest-scoring action with some randomness
        return self.select_action_with_variance(action_scores)
```

SOCIAL RELATIONSHIP SYSTEM
---------------------------
**RELATIONSHIP DYNAMICS:**
- Trust levels based on interaction history
- Affection through positive shared experiences
- Respect from demonstrated competence
- Fear from power imbalances or threats

**RELATIONSHIP EVOLUTION:**
```python
def update_relationship(self, npc1: NPCProfile, npc2: NPCProfile, 
                       interaction_type: str, outcome: str):
    # Calculate relationship delta based on interaction
    trust_delta = self.calculate_trust_change(interaction_type, outcome)
    affection_delta = self.calculate_affection_change(interaction_type, outcome)
    
    # Apply personality modifiers
    trust_delta *= self.get_trust_personality_modifier(npc1, npc2)
    affection_delta *= self.get_affection_personality_modifier(npc1, npc2)
    
    # Update relationship scores
    relationship = npc1.relationships.get(npc2.name, defaultdict(float))
    relationship['trust'] += trust_delta
    relationship['affection'] += affection_delta
    
    # Store interaction in memory
    memory_event = self.create_relationship_memory(npc2, interaction_type, outcome)
    npc1.memories.append(memory_event)
```

FACTION INTEGRATION
-------------------
**LOYALTY DYNAMICS:**
- Initial loyalty based on recruitment circumstances
- Loyalty changes through faction actions and personal experiences
- Defection thresholds and consequences
- Multiple faction allegiances and conflicts

**FACTION INFLUENCE ON BEHAVIOR:**
- Faction goals influence individual NPC goals
- Faction resources provide opportunities and constraints
- Faction conflicts create social tensions
- Faction propaganda affects opinion formation

MEMORY AND LEARNING SYSTEM
---------------------------
**MEMORY CATEGORIES:**
- **Episodic**: Specific events and experiences
- **Semantic**: General knowledge and facts
- **Procedural**: Skills and behavioral patterns
- **Social**: Relationship and interaction history

**MEMORY INFLUENCE ON DECISIONS:**
```python
def get_memory_influence(self, action: str, memories: List[Memory]) -> float:
    influence = 1.0
    
    # Find relevant memories
    relevant_memories = [m for m in memories if self.is_memory_relevant(m, action)]
    
    # Weight recent memories more heavily
    for memory in relevant_memories:
        age_weight = self.calculate_memory_age_weight(memory)
        emotional_weight = memory.emotional_intensity
        
        if memory.outcome == "positive":
            influence += 0.1 * age_weight * emotional_weight
        elif memory.outcome == "negative":
            influence -= 0.1 * age_weight * emotional_weight
    
    return max(0.1, min(2.0, influence))  # Cap influence range
```

PERFORMANCE OPTIMIZATION
-------------------------
**SCALABILITY FEATURES:**
- Behavior tree caching for common scenarios
- Lazy evaluation of complex decisions
- Spatial partitioning for social interactions
- Priority queues for processing order
- Memory management for long-term simulation

**PROCESSING TARGETS:**
- 1,000 NPCs: Real-time processing
- 10,000 NPCs: Near real-time with optimizations
- 50,000 NPCs: Batch processing mode
- <5ms per NPC per decision cycle
- Efficient memory usage (~2KB per NPC)

===============================================================================
NPC CAREER TRANSITION SYSTEM
===============================================================================

OVERVIEW
--------
The NPC Career Transition System enables dynamic professional mobility within
the Age of Scribes social simulation. NPCs can change careers based on their
experiences, motivations, economic pressures, and life circumstances, creating
realistic character development and economic adaptation.

INTEGRATION WITH EXISTING SYSTEMS
----------------------------------
**MOTIVATION-DRIVEN TRANSITIONS:**
The existing motivation engine naturally supports career transitions:

- **SURVIVAL MOTIVATION**: Economic hardship drives career changes to more profitable work
- **KNOWLEDGE MOTIVATION**: Discovery of new interests leads to scholarly pursuits
- **WEALTH MOTIVATION**: Poor economic conditions motivate transitions to lucrative trades
- **FREEDOM MOTIVATION**: Restrictive work environments drive independence-seeking
- **POWER MOTIVATION**: Success creates ambition for leadership positions
- **REVENGE MOTIVATION**: Professional betrayal motivates career escapes
- **COMMUNITY MOTIVATION**: Isolation drives transitions to more social professions
- **DUTY MOTIVATION**: Personal calling drives career changes toward service

**FACTION-BASED CAREER DISRUPTION:**
```python
def evaluate_faction_career_impact(npc: NPCProfile) -> Dict[str, float]:
    career_disruption_factors = {}
    
    # Guild defection consequences
    if npc.faction_loyalty.get("professional_guild", 0) < -0.5:
        career_disruption_factors["guild_exile"] = 0.8
        npc.generate_goal("establish_independent_practice")
    
    # Professional blacklisting
    if npc.reputation_scores.get("professional", 0) < -0.6:
        career_disruption_factors["reputation_damage"] = 0.7
        npc.generate_goal("rebuild_career_in_new_field")
    
    # Faction collapse
    controlling_faction = npc.get_primary_faction()
    if controlling_faction and controlling_faction.power_level < 0.3:
        career_disruption_factors["institutional_failure"] = 0.6
        npc.generate_goal("find_alternative_employment")
    
    return career_disruption_factors
```

CAREER TRANSITION TRIGGERS
---------------------------
**ECONOMIC PRESSURE MODELING:**
```python
def evaluate_economic_pressure(npc: NPCProfile, settlement: Settlement) -> float:
    pressure_score = 0.0
    
    # Market demand for current profession
    profession_demand = settlement.get_profession_demand(npc.occupation)
    if profession_demand < 0.3:
        pressure_score += 0.4
        npc.motivational_weights["survival"] += 0.3
    
    # Personal economic status
    if npc.economic_status == "struggling":
        pressure_score += 0.5
    elif npc.economic_status == "failing":
        pressure_score += 0.8
    
    # Age and physical capability decline
    if npc.age > 50 and npc.occupation in ["laborer", "soldier", "miner"]:
        pressure_score += 0.3
    
    # Family obligations
    if npc.has_dependents and npc.income < npc.calculate_family_needs():
        pressure_score += 0.4
    
    # Trigger career transition goal if pressure exceeds threshold
    if pressure_score > 0.6:
        npc.generate_goal("transition_to_sustainable_career")
    
    return pressure_score
```

**SKILL RECOGNITION TRIGGERS:**
```python
def evaluate_skill_recognition(npc: NPCProfile) -> str:
    # Check for secondary skills with high reputation
    for skill, reputation in npc.reputation_scores.items():
        if skill != npc.primary_profession and reputation > 0.6:
            if npc.professional_skills.get(skill, 0) > 0.4:
                return f"transition_to_{skill}_profession"
    
    # Discovery of hidden aptitudes
    for aptitude, level in npc.career_aptitudes.items():
        current_profession_aptitude = npc.get_profession_aptitude(npc.occupation)
        if level > current_profession_aptitude + 0.3:
            return f"explore_{aptitude}_career_options"
    
    return None
```

PROFESSIONAL SKILL TRACKING
----------------------------
**SKILL DEVELOPMENT SYSTEM:**
```python
class ProfessionalSkills:
    def __init__(self):
        self.skills = {
            "blacksmithing": 0.0,
            "trading": 0.0,
            "scholarship": 0.0,
            "leadership": 0.0,
            "combat": 0.0,
            "artistry": 0.0,
            "agriculture": 0.0,
            "diplomacy": 0.0
        }
        
        self.career_aptitudes = {
            "physical_trades": 0.0,     # Strength, coordination, craftsmanship
            "intellectual_work": 0.0,   # Analysis, reasoning, memory
            "social_professions": 0.0,  # Charisma, empathy, communication
            "artistic_pursuits": 0.0,   # Creativity, aesthetic sense
            "leadership_roles": 0.0     # Decision-making, authority, inspiration
        }
    
    def calculate_skill_development(self, activity: str, success: bool, duration: float):
        base_gain = 0.01 * duration  # 1% per day of focused practice
        
        # Aptitude modifier
        relevant_aptitude = self.get_relevant_aptitude(activity)
        aptitude_modifier = 0.5 + relevant_aptitude
        
        # Success modifier
        success_modifier = 1.2 if success else 0.8
        
        # Age modifier (learning slows with age)
        age_modifier = max(0.3, 1.0 - (self.npc.age - 20) * 0.01)
        
        skill_gain = base_gain * aptitude_modifier * success_modifier * age_modifier
        
        # Apply diminishing returns for high skill levels
        current_level = self.skills.get(activity, 0.0)
        diminishing_factor = max(0.1, 1.0 - current_level)
        
        final_gain = skill_gain * diminishing_factor
        self.skills[activity] = min(1.0, self.skills[activity] + final_gain)
```

CAREER TRANSITION PROCESS
--------------------------
**TRANSITION PHASES:**

**PHASE 1: MOTIVATION SHIFT**
- Life events change motivational priorities
- Career dissatisfaction accumulates
- Economic or social pressures mount
- New opportunities or interests emerge

**PHASE 2: GOAL GENERATION**
```python
career_transition_goals = {
    "apprenticeship": {
        "description": "Seek training in new profession",
        "duration": "1-3 years",
        "requirements": ["master_craftsperson", "guild_acceptance", "financial_support"],
        "success_factors": ["aptitude", "dedication", "social_connections"],
        "failure_consequences": ["financial_loss", "time_waste", "reputation_damage"]
    },
    
    "independent_practice": {
        "description": "Establish own business in new field",
        "duration": "6 months - 2 years", 
        "requirements": ["startup_capital", "workspace", "initial_clients"],
        "success_factors": ["business_acumen", "market_timing", "product_quality"],
        "failure_consequences": ["bankruptcy", "debt", "professional_reputation_loss"]
    },
    
    "gradual_transition": {
        "description": "Slowly shift focus while maintaining current work",
        "duration": "2-5 years",
        "requirements": ["time_management", "energy", "supportive_environment"],
        "success_factors": ["persistence", "skill_development", "network_building"],
        "failure_consequences": ["burnout", "mediocrity_in_both_fields"]
    }
}
```

**PHASE 3: SKILL DEVELOPMENT**
- Formal training or apprenticeship
- Self-directed learning and practice
- Mentorship relationships
- Trial work and experimentation

**PHASE 4: NETWORK BUILDING**
- Professional relationship formation
- Industry knowledge acquisition
- Client base development
- Reputation establishment

**PHASE 5: IDENTITY TRANSITION**
- Professional identity shift
- Social role adaptation
- Lifestyle adjustments
- New career goal formation

REALISTIC CAREER CHANGE SCENARIOS
----------------------------------
**THE DISGRACED SCHOLAR → MERCHANT:**
```python
def process_scholar_to_merchant_transition(npc: NPCProfile):
    # Trigger: Academic scandal destroys professional reputation
    trigger_event = "falsified_research_exposure"
    
    # Motivation shift
    npc.motivational_weights["knowledge"] *= 0.3  # Disillusionment
    npc.motivational_weights["survival"] *= 2.0   # Desperate need
    npc.motivational_weights["wealth"] *= 1.5     # New focus
    
    # Personality evolution
    npc.personality["openness"] *= 0.8           # Less idealistic
    npc.personality["conscientiousness"] *= 1.2  # More practical
    
    # Goal generation
    npc.generate_goal("establish_trading_business")
    npc.generate_goal("rebuild_social_reputation")
    
    # Skill transfer and development
    npc.skills["scholarship"] *= 0.7  # Rusty but retained
    npc.skills["trading"] = 0.0       # Starting fresh
    npc.career_aptitudes["intellectual_work"] = 0.8  # Retained ability
    
    # Network changes
    npc.sever_relationships_by_tag("academic")
    npc.seek_relationships_by_tag("merchant")
    
    return "successful_career_transition"
```

**THE TRAUMATIZED GUARD → HERMIT SCHOLAR:**
```python
def process_guard_to_scholar_transition(npc: NPCProfile):
    # Trigger: Witnessing horrific violence
    trauma_event = "battlefield_massacre_witness"
    
    # Motivation shift
    npc.motivational_weights["community"] *= 0.2   # Social withdrawal
    npc.motivational_weights["knowledge"] *= 3.0   # Seeking understanding
    npc.motivational_weights["power"] *= 0.1       # Rejection of authority
    
    # Personality evolution
    npc.personality["extraversion"] *= 0.3         # Becomes withdrawn
    npc.personality["neuroticism"] *= 1.4          # Increased anxiety
    npc.personality["openness"] *= 1.3             # Seeking new perspectives
    
    # Goal generation
    npc.generate_goal("find_isolated_study_location")
    npc.generate_goal("research_conflict_philosophy")
    npc.generate_goal("achieve_inner_peace")
    
    # Skill evolution
    combat_skill = npc.skills.get("combat", 0.0)
    npc.skills["scholarship"] = combat_skill * 0.3  # Tactical knowledge transfers
    npc.skills["combat"] *= 0.8  # Retained but unused
    
    return "trauma_driven_career_change"
```

ECONOMIC INTEGRATION
--------------------
**PROFESSION DEMAND MODELING:**
```python
def calculate_profession_demand(settlement: Settlement, profession: str) -> float:
    # Base demand based on settlement tier and population
    base_demand = settlement.get_tier_profession_demand(profession)
    
    # Economic factors
    economic_modifier = settlement.economic_prosperity
    
    # Resource availability (e.g., blacksmiths need ore)
    resource_modifier = settlement.get_profession_resource_availability(profession)
    
    # Competition factor (existing practitioners)
    competition_modifier = 1.0 / max(1, settlement.count_profession(profession))
    
    # Regional factors
    regional_modifier = settlement.region.get_profession_demand(profession)
    
    return base_demand * economic_modifier * resource_modifier * competition_modifier * regional_modifier
```

**INCOME CALCULATION:**
```python
def calculate_profession_income(npc: NPCProfile, settlement: Settlement) -> float:
    # Base income for profession
    base_income = settlement.get_profession_base_income(npc.occupation)
    
    # Skill modifier
    skill_level = npc.skills.get(npc.occupation, 0.1)
    skill_modifier = 0.5 + (skill_level * 1.5)  # 50% to 200% of base
    
    # Reputation modifier
    reputation = npc.reputation_scores.get("professional", 0.0)
    reputation_modifier = 1.0 + (reputation * 0.5)  # ±50% based on reputation
    
    # Market demand modifier
    demand = settlement.get_profession_demand(npc.occupation)
    demand_modifier = 0.5 + demand  # 50% to 150% based on demand
    
    # Competition modifier
    competition = settlement.get_profession_competition(npc.occupation)
    competition_modifier = max(0.3, 1.0 - competition)
    
    return base_income * skill_modifier * reputation_modifier * demand_modifier * competition_modifier
```

CAREER TRANSITION GOAL MANAGEMENT
----------------------------------
**GOAL TRACKING SYSTEM:**
```python
class CareerTransitionGoal:
    def __init__(self, goal_type: str, target_profession: str):
        self.goal_type = goal_type
        self.target_profession = target_profession
        self.progress = 0.0
        self.requirements_met = {}
        self.obstacles = []
        self.timeline = self.calculate_expected_timeline()
        
    def update_progress(self, activity: str, success: bool, time_spent: float):
        # Calculate progress based on activity relevance
        relevance = self.get_activity_relevance(activity)
        progress_gain = relevance * time_spent * (1.2 if success else 0.8)
        
        # Apply diminishing returns
        current_progress = self.progress
        diminishing_factor = max(0.1, 1.0 - current_progress)
        
        self.progress += progress_gain * diminishing_factor
        self.progress = min(1.0, self.progress)
        
        # Check for milestone achievements
        self.check_milestones()
    
    def evaluate_completion(self) -> bool:
        # Check if all requirements are met and progress is sufficient
        required_progress = 0.8
        required_skills_met = all(self.requirements_met.values())
        
        return self.progress >= required_progress and required_skills_met
```

SOCIAL NETWORK EVOLUTION
-------------------------
**RELATIONSHIP CHANGES DURING TRANSITION:**
```python
def update_relationships_for_career_change(npc: NPCProfile, old_profession: str, new_profession: str):
    # Relationships may weaken with old professional network
    for contact_name, relationship in npc.relationships.items():
        contact = get_npc_by_name(contact_name)
        if contact.occupation == old_profession:
            # Gradual drift in professional relationships
            relationship["professional_relevance"] *= 0.7
            relationship["interaction_frequency"] *= 0.8
        
        # Some relationships may strengthen (mentors, supporters)
        if contact.has_supported_career_change(npc):
            relationship["trust"] += 0.2
            relationship["gratitude"] += 0.3
    
    # Seek new relationships in target profession
    npc.add_goal(f"build_network_in_{new_profession}")
    
    # Potential mentor relationships
    experienced_practitioners = find_npcs_by_profession(new_profession)
    for practitioner in experienced_practitioners:
        if practitioner.skills[new_profession] > 0.7:
            npc.add_potential_mentor(practitioner)
```

INTEGRATION WITH OTHER SYSTEMS
-------------------------------
**SETTLEMENT ECONOMIC IMPACT:**
- Career transitions affect local skill availability
- Professional migration influences settlement development
- Economic specialization emerges from transition patterns
- Settlement attractiveness to different professions

**FACTION DYNAMICS:**
- Professional guilds gain/lose members through transitions
- Political factions recruit from successful career changers
- Economic changes affect faction power balances
- Guild policies influence career mobility

**REPUTATION EFFECTS:**
- Career changes can enhance or damage various reputation dimensions
- Professional reputation transfers partially to new careers
- Social reputation may be affected by career stability
- Regional reputation influences career opportunities

PERFORMANCE CONSIDERATIONS
---------------------------
**OPTIMIZATION STRATEGIES:**
- Lazy evaluation of career transition opportunities
- Batch processing of skill development calculations
- Efficient caching of profession demand calculations
- Priority queues for processing career transition goals

**MEMORY MANAGEMENT:**
- Efficient storage of career history
- Garbage collection of outdated skill data
- Compression of relationship network data
- Archival of completed transition goals

**SCALABILITY TARGETS:**
- 1,000 NPCs with active career tracking
- Real-time processing of career transitions
- <2ms per NPC for career evaluation per tick
- Efficient integration with existing AI decision-making

This comprehensive career transition system adds significant depth to NPC autonomy,
creating believable characters who adapt their professional lives in response to
changing circumstances, personal growth, and economic opportunities. The system
integrates seamlessly with existing motivation, faction, and reputation systems
while providing new dimensions for character development and world building.

===============================================================================

GUILD CHARTER AND ADMINISTRATION SYSTEM
========================================

OVERVIEW
--------
The Guild Charter and Administration System defines internal governance, rules, and 
justice logic for each guild. It ensures that guild operations are governed by 
consistent internal rules and consequences, creating realistic power dynamics and 
accountability that apply equally to NPCs and Player Characters.

CORE CLASSES
------------

**GuildCharter Class:**
- guild_id: str - Unique identifier of the guild this charter governs
- charter_name: str - Display name of the charter
- core_doctrine: str - Fundamental principle (e.g., "artisan protection", "free trade")
- accepted_professions: list[str] - List of professions welcomed in the guild
- political_alignment: Optional[str] - Faction ID or "neutral"
- membership_requirements: dict[str, Any] - Requirements for joining (skills, loyalty, etc.)
- punishment_policy: dict[str, str] - Mapping of offenses to punishments
- promotion_criteria: dict[str, Any] - Requirements for rank advancement
- economic_rights: dict[str, bool] - Economic privileges and restrictions
- is_outlawed: bool - Whether the guild is banned regionally/factionally
- amendment_history: list[dict] - Tracks past edits or policy changes

**LocalGuild Updates:**
- charter: Optional[GuildCharter] - The guild's governing charter
- apply_policy(policy_key: str, value: Any) -> None - Apply charter policies
- enforce_punishment(npc: NPCProfile, offense: str) -> None - Execute punishments

PUNISHMENT SYSTEM
-----------------
**Punishment Types:**
1. WARNING - Records warning in NPC history
2. FINE - Applies monetary penalty
3. DEMOTION - Reduces member rank, decreases loyalty
4. SUSPENSION - Temporary exclusion, loyalty and reputation loss
5. EXPULSION - Permanent removal from guild, reputation impact
6. BLACKLIST - Permanent ban from all guilds of this type, severe penalties
7. COMMUNITY_SERVICE - Assigned service hours, minor loyalty reduction

**Default Offense-Punishment Mapping:**
- minor_theft: warning
- major_theft: suspension
- smuggling: expulsion
- betrayal_of_secrets: expulsion
- violence_against_member: demotion
- violence_against_outsider: fine
- charter_violation: warning
- repeated_charter_violation: expulsion
- treason: blacklist

PC-SPECIFIC RULES
-----------------
**Guild Foundation:**
- PC-founded guilds must define a charter at time of founding
- Charter creation follows same rules as NPC guilds
- Initial charter based on guild type with customization options

**Charter Amendments:**
- PCs can propose amendments requiring support from high-rank members
- Amendment support requirements:
  * Doctrine Change: 75% of masters
  * Profession Update: 60% of masters
  * Requirement Modification: 50% of masters
  * Punishment Revision: 60% of masters
  * Economic Rights Change: 75% of masters
  * Political Realignment: 80% of masters

**PC Justice:**
- PCs can be judged by their own charter if they violate policies
- Same punishment system applies regardless of NPC or PC status
- No special exemptions or privileges for PC leadership

**Leadership Consequences:**
If PC attempts to override charter unjustly:
- May trigger rebellion from loyal members
- Can cause splinter chapters to form
- Loyal NPCs may turn against PC leadership
- Guild stability and loyalty scores decrease

INTEGRATION HOOKS
-----------------
**Guild Reputation System:**
- Charter violations affect internal guild reputation
- Repeated violations damage external reputation
- Fair enforcement improves guild stability

**Faction Integration:**
- Factions can ban or subsidize guilds based on charters
- Political alignment affects faction relationships
- Outlawed status impacts guild operations

**Rumor Engine:**
- Charter violations can spread via gossip
- Punishment events generate rumors
- Unfair enforcement creates negative rumors

**Memory Core:**
- NPCs remember internal injustices or unfair trials
- Punishment history affects future behavior
- Charter enforcement impacts NPC personality development

CORE FUNCTIONS
--------------
**evaluate_guild_policy_compliance(npc, guild) -> Optional[str]:**
- Checks if NPC violates charter terms
- Returns recommended punishment action if violation detected

**evaluate_member_compliance(npc, charter) -> Dict[str, Any]:**
- Evaluates compliance against charter requirements
- Returns detailed compliance report with violations and warnings

**process_guild_punishment(guild, npc, offense) -> Dict[str, Any]:**
- Processes punishment according to guild charter policy
- Executes appropriate punishment and logs effects

**generate_default_charter(guild_id, guild_type, guild_name) -> GuildCharter:**
- Generates appropriate default charter based on guild type
- Customizes doctrines, professions, and economic rights by type

GUILD TYPE CUSTOMIZATIONS
--------------------------
**Merchants:**
- Core Doctrine: "fair trade and mutual prosperity"
- Professions: merchant, trader, banker, caravan_master
- Economic Rights: trade_control, price_setting, cross_border_trade

**Craftsmen:**
- Core Doctrine: "mastery of craft and protection of trade secrets"
- Professions: blacksmith, carpenter, mason, jeweler, tailor
- Economic Rights: monopoly_rights, price_setting, government_contracts

**Scholars:**
- Core Doctrine: "pursuit of knowledge and preservation of learning"
- Professions: scribe, scholar, librarian, teacher, researcher
- Economic Rights: tax_privileges, government_contracts

**Warriors:**
- Core Doctrine: "protection of the innocent and martial excellence"
- Professions: guard, soldier, mercenary, trainer
- Economic Rights: government_contracts

SYSTEM BENEFITS
---------------
**Realistic Governance:**
- Guilds operate under consistent internal rules
- Power dynamics reflect actual organizational behavior
- Leadership accountability prevents arbitrary decisions

**Equal Treatment:**
- Same rules apply to NPCs and PCs
- No special privileges based on player status
- Consequences are consistently applied

**Dynamic Evolution:**
- Charters can be amended through political processes
- Guild policies evolve based on member needs
- External pressures influence internal governance

**Rich Storytelling:**
- Charter violations create compelling narratives
- Internal conflicts arise from policy disagreements
- Justice systems reflect guild values and culture

===============================================================================
GUILD SUMMITS SYSTEM
===============================================================================

OVERVIEW
--------
The Guild Summits System enables large, multi-guild diplomatic events that allow for
alliance formation, dispute arbitration, economic collaboration, and political sabotage.
Guild summits are formal diplomatic gatherings where multiple guilds can negotiate,
form alliances, resolve conflicts, and engage in political maneuvering.

Summits serve as pivotal moments in regional politics, creating opportunities for
both cooperation and conflict. They can reshape the political landscape, establish
new trade relationships, resolve long-standing disputes, or escalate tensions into
open warfare.

CORE COMPONENTS
===============

**GUILDSUMMIT CLASS:**
Comprehensive diplomatic event management system:
```python
class GuildSummit:
    summit_id: str                          # Unique identifier
    location_id: str                        # Facility or settlement hosting event
    host_guild_id: str                      # Guild organizing the summit
    invited_guilds: List[str]               # Guild IDs invited to participate
    attending_guilds: List[str]             # Guild IDs actually attending
    agenda: List[str]                       # Items for discussion
    start_day: int                          # When summit begins
    duration_days: int                      # Summit duration (default 3 days)
    status: str                            # "scheduled", "in_progress", "concluded"
    outcome_log: List[Dict[str, Any]]      # Record of decisions and events
    voting_records: Dict[str, Dict[str, str]]  # agenda_item -> guild_id -> vote
```

**AGENDA SYSTEM:**
Structured agenda with flexible item types:
- Alliance Formation: Creating new guild alliances
- Blacklist Repeal: Removing trade restrictions  
- Joint Trade Route: Shared commercial ventures
- War Declaration: Formal declaration of hostilities
- Non-Aggression Pact: Peace agreements
- Economic Embargo: Trade sanctions and boycotts
- Territorial Agreement: Border negotiations
- Reparations Demand: Compensation for grievances
- Resource Sharing: Cooperative resource management
- Guild Sanction: Disciplinary measures
- Monopoly Agreement: Market control arrangements
- Settlement Status: Settlement governance changes

**VOTING AND DECISION-MAKING:**
Weighted voting system based on guild characteristics:
- Base voting power: 1.0 for all guilds
- Host guild bonus: 1.2x multiplier
- Influence modifier: 0.5 + (influence_score / 100)
- Wealth modifier: 0.8 + (wealth_level / 200)
- Stability modifier: 0.6 + (stability / 150)
- Faction alignment: 1.3x if aligned with sponsors

Vote Types:
- APPROVE: Full support for agenda item
- REJECT: Opposition to agenda item
- ABSTAIN: Neutral position
- CONDITIONAL: Support with modifications
- WALKOUT: Complete rejection, leaves summit

Decision Outcomes:
- Approved: 60%+ voting power supports
- Approved Conditional: 50%+ supports with conditions
- Rejected: 40%+ voting power rejects
- Tabled: No clear majority, postponed
- Failed No Quorum: Insufficient participation

PC INTEGRATION
==============

**ATTENDANCE OPTIONS:**
- Representative: Official delegate for a guild
- Observer: Invited to witness but not vote
- Uninvited: Infiltration or unauthorized attendance

**PC ACTIONS:**
- Propose Agenda Item: Add items during summit
- Influence Delegate: Sway voting through persuasion/bribery/intimidation
- Leak Information: Share summit contents with rumor network
- Sabotage: Disrupt summit proceedings

**DISCOVERY MECHANICS:**
PC actions carry discovery risk with consequences:
- Reputation damage with participating guilds
- Potential expulsion from summit
- Long-term diplomatic consequences
- Integration with rumor and memory systems

DYNAMIC EVENTS
==============

**WALKOUT MECHANICS:**
Guilds may walk out when:
- Agenda items violate charter principles
- Strong opposition to proposed measures
- Discovery of sabotage or corruption
- Faction pressure or coercion

**FACTION INTERFERENCE:**
Factions influence summits through:
- Sponsorship: Financial backing for outcomes
- Observer status: Information gathering
- Direct interference: Pressure, incentives, threats

**SECURITY LEVELS:**
- Low: Minimal security, easy infiltration
- Normal: Standard diplomatic protection
- High: Enhanced security, difficult infiltration
- Maximum: Extreme security, nearly impossible sabotage

INTEGRATION HOOKS
=================

**Guild Charter System:**
- Pacifist charters oppose war declarations
- Isolationist charters resist alliance formations
- Charter violations trigger automatic walkouts
- Political alignment affects voting preferences

**Reputation Engine:**
- Successful diplomacy improves relationships
- Walkouts damage diplomatic standing
- Host guilds gain reputation for successful summits
- Failed summits harm participants' standing

**Memory Core:**
NPCs remember summit events:
- Betrayals during negotiations
- Successful alliance formations
- Summit disruptions and sabotage
- Long-term relationship consequences

**Rumor Engine:**
Summits generate significant rumor content:
- Pre-summit speculation about outcomes
- Leaked information during proceedings
- Post-summit analysis and gossip
- Scandal and corruption stories

**Faction Layer:**
Factions use summits for political goals:
- Advancing territorial interests
- Economic advantage through guild control
- Diplomatic manipulation and espionage
- Long-term strategic positioning

CORE FUNCTIONS
==============

**schedule_guild_summit(host_guild, invited_guild_ids, agenda, start_day, duration_days) -> GuildSummit:**
- Validates host guild has appropriate facilities
- Creates and registers new summit
- Sends invitations to target guilds
- Records summit creation in guild history
- Sets location modifiers based on host reputation

**process_guild_summit_day(summit, day, guilds, pc_actions) -> Dict[str, Any]:**
- Processes daily summit activities and decision-making
- Handles PC actions and their consequences
- Processes agenda items with voting and outcomes
- Manages walkouts and dramatic events
- Processes faction interference
- Returns comprehensive daily results

**get_summit_quest_opportunities(summit, guilds) -> List[Dict[str, Any]]:**
- Generates quest opportunities related to summits
- Pre-summit: Diplomatic courier, intelligence gathering
- During-summit: Negotiation, influence, sabotage
- Post-summit: Reconciliation, conflict prevention

**evaluate_summit_impact(summit, guilds, settlements) -> Dict[str, Any]:**
- Evaluates overall summit impact on game world
- Calculates reputation changes for participants
- Determines economic and political consequences
- Generates narrative outcomes and long-term effects

QUEST INTEGRATION
=================

**Pre-Summit Quests:**
- Diplomatic Courier: Deliver invitations, gather responses
- Summit Intelligence: Gather information about positions

**During-Summit Quests:**
- Summit Negotiator: Influence voting outcomes
- Disrupt the Summit: Covert sabotage operations

**Post-Summit Quests:**
- Mend Summit Rifts: Repair damaged relationships
- Implement Agreements: Execute summit decisions

TECHNICAL SPECIFICATIONS
=========================

**Performance Characteristics:**
- Memory usage: 5-10KB per summit
- Processing: Sub-second daily processing
- Scalability: Multiple concurrent summits supported
- Integration: Minimal system impact through efficient hooks

**Voting Algorithm:**
Guild voting determined by:
1. Guild type base preferences
2. Charter alignment modifiers
3. Existing relationship considerations
4. Stability and influence factors
5. Random unpredictability elements

**Status Progression:**
SCHEDULED → IN_PROGRESS → CONCLUDED/CANCELLED/DISRUPTED

EXPANSION AREAS
===============

**Summit Variants:**
- Emergency summits with reduced preparation
- Secret summits with limited visibility
- Multi-regional summits involving settlements
- Faction-sponsored summits with predetermined outcomes
- Trade fairs combined with diplomatic summits

**Advanced PC Integration:**
- PC guild founding and summit hosting
- Advanced diplomacy skills affecting success rates
- Equipment for improved espionage capabilities
- Reputation systems affecting invitation likelihood
- Character backgrounds influencing diplomatic options

**Complex Consequences:**
- Long-term alliance maintenance requirements
- Economic treaty implementation mechanics
- Military cooperation agreement details
- Territorial agreement enforcement systems
- Sanction and embargo economic effects

The Guild Summits System creates pivotal diplomatic moments that can reshape
regional politics. Through careful integration with existing systems and rich
narrative possibilities, summits become memorable events with lasting consequences.
The system supports both cooperative and competitive gameplay while maintaining
consistency with broader game world systems.

Guild Elections and Leadership System (guild_elections_system.py)
================================================================

The Guild Elections System provides comprehensive democratic governance for guilds
through periodic elections, succession events, and internal power dynamics. The system
handles leadership transitions, candidate campaigns, voting mechanisms, and political
consequences of electoral outcomes.

**OVERVIEW:**
This system enables dynamic guild leadership that responds to member satisfaction,
faction politics, and guild performance while providing rich opportunities for PC
participation in guild governance and political maneuvering.

**KEY FEATURES:**
- Periodic election cycles with configurable frequency (default annual)
- Multiple election types: scheduled, emergency, impeachment, succession, coup
- Comprehensive campaign system with daily activities and faction involvement
- Weighted voting based on member influence, approval ratings, and platform alignment
- Full PC integration for candidacy, campaigning, and political maneuvering

**CORE COMPONENTS:**
1. GuildElection Class: Complete election event management from nomination to results
2. Enhanced LocalGuild Class: Election cycle tracking and leadership history
3. Political Action System: PC candidacy, vote manipulation, scandal investigation
4. Campaign System: Daily activities, endorsements, and faction interference

**ELECTION TYPES AND TRIGGERS:**
- SCHEDULED: Regular democratic elections (365-day cycles)
- EMERGENCY: Crisis-driven changes (stability < 25%, 5% daily chance)
- IMPEACHMENT: Unpopular leader removal (approval < 30%, 10% daily chance)
- SUCCESSION: Planned leadership transitions via charter mandates
- COUP: Hostile takeover attempts during extreme instability

**CAMPAIGN MECHANICS:**
- 14-day campaign periods with daily activity processing
- 5 campaign activities: speeches, meetings, outreach, negotiations, fundraising
- Faction interference with 20% daily chance of involvement
- Scandal generation and opposition research systems
- PC candidates have enhanced effectiveness (80% vs 30-70% NPC base)

**VOTING SYSTEM:**
Weighted voting algorithm incorporating:
- Candidate approval ratings and platform appeal
- Campaign effectiveness and resource allocation
- Faction endorsements and political backing
- Guild type bonuses for policy alignment
- Scandal penalties and PC candidate advantages
- Variable voter turnout based on guild stability

**OUTCOME CLASSIFICATION:**
- Decisive Victory: 30%+ margin, +5 stability
- Narrow Victory: 10-30% margin, +2 stability
- Contested Result: 5-10% margin, -3 stability
- Tie Broken: <5% margin, -5 stability, contested flag
- No Confidence: No viable candidates, -15 stability

**PC INTEGRATION:**
Full political participation system:
- Candidacy with platform definition and campaign management
- Political maneuvering: vote manipulation, opposition research, coalition building
- Discovery risks and reputation consequences for illicit actions
- Leadership responsibilities including policy implementation and approval management

**ENHANCED LOCALGUILD ATTRIBUTES:**
- election_cycle_days: Time between scheduled elections
- next_election_day: Day of next scheduled election
- leadership_candidate_ids: Current election candidates
- leadership_preferences: Candidate evaluation metrics
- head_of_guild: Current leader NPC/PC ID
- leadership_approval_rating: Current leader popularity

**CORE FUNCTIONS:**
- schedule_guild_election(): Determines if guild should hold election
- conduct_guild_election(): Processes campaigns and voting
- Campaign processing with daily activity simulation
- Election result application and consequence management

**INTEGRATION HOOKS:**
- Guild Charter System: Election procedures and candidate eligibility
- Faction Layer: Endorsements, funding, and political interference
- Reputation Engine: Electoral promises, campaign conduct, leadership performance
- Memory Core: NPC retention of political events and relationships
- Settlement System: Regional political influence and stability effects
- Rumor Engine: Campaign information and election result propagation

**QUEST OPPORTUNITIES:**
- Pre-Election: Campaign management, investigation, corruption exposure
- During-Election: Election security, political maneuvering, crisis management
- Post-Election: Dispute resolution, policy implementation, unity restoration

**TECHNICAL SPECIFICATIONS:**
- Memory usage: 3-8KB per active election
- Election algorithm: O(n*m) for n candidates, m voting factors
- Supports 50+ concurrent elections with 10+ candidates each
- Complete historical tracking and political relationship persistence
- Integration with 8+ existing systems for comprehensive political simulation

**EXPANSION AREAS:**
- Multi-guild regional elections and coalition governments
- Advanced platform customization and policy implementation
- Political party development and cross-guild movements
- Integration with settlement-wide governance systems

The Guild Elections System creates dynamic political environments that respond to
member needs, faction pressures, and regional events. Through regular elections,
emergency successions, and political maneuvering, the system generates compelling
narratives while maintaining realistic democratic governance structures.

===============================================================================

This master documentation consolidates all Age of Scribes system information.
Individual documentation files have been merged here for efficiency.

Status: PRODUCTION READY
Systems: Settlement, Economy, NPC AI, Factions, Reputation, Justice, Guild Charter, Guild Summits, Guild Elections, Supporting 